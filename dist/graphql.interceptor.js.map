{"version":3,"file":"graphql.interceptor.js","sourceRoot":"/","sources":["graphql.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { CallHandler, ExecutionContext, Injectable, NestInterceptor } from \"@nestjs/common\";\nimport { Observable } from \"rxjs\";\nimport { tap } from \"rxjs/operators\";\n// import { InjectSentry } from \"./sentry.decorator\";\nimport { SentryService } from \"./sentry.service\";\n\nimport {\n    HttpArgumentsHost,\n    WsArgumentsHost,\n    RpcArgumentsHost\n  } from '@nestjs/common/interfaces';\n\nimport type { GqlContextType, GqlExecutionContext as GqlExecutionContextTpe } from '@nestjs/graphql';\n\n// Sentry imports\nimport { Scope } from '@sentry/hub';\nimport { Handlers } from '@sentry/node';\n\nlet GqlExecutionContext: any;\ntry {\n  ({ GqlExecutionContext } = require('@nestjs/graphql'));\n} catch (e) {}\n\n\n@Injectable()\nexport class GraphqlInterceptor implements NestInterceptor {\n    private client: SentryService = SentryService.SentryServiceInstance();\n    constructor(\n        // @InjectSentry() private readonly client: SentryService\n    ) { }\n\n    intercept(context: ExecutionContext, next: CallHandler): Observable<any> {\n        // first param would be for events, second is for errors\n        return next.handle().pipe(\n            tap(null, (exception) => {\n                this.client.instance().withScope((scope) => {\n                    switch (context.getType<GqlContextType>()) {\n                        case 'http':\n                            return this.captureHttpException(\n                                scope,\n                                context.switchToHttp(),\n                                exception\n                            );\n                        case 'rpc':\n                            return this.captureRpcException(\n                                scope,\n                                context.switchToRpc(),\n                                exception,\n                            );\n                        case 'ws':\n                            return this.captureWsException(\n                                scope,\n                                context.switchToWs(),\n                                exception,\n                            );\n                        case 'graphql':\n                            return this.captureGraphqlException(\n                                scope,\n                                GqlExecutionContext.create(context),\n                                exception\n                            );\n                    }\n                })\n            })\n        );\n    }\n\n    private captureHttpException(scope: Scope, http: HttpArgumentsHost, exception: any): void {\n        const data = Handlers.parseRequest(<any>{}, http.getRequest(), {});\n\n        scope.setExtra('req', data.request);\n\n        if (data.extra) scope.setExtras(data.extra);\n        if (data.user) scope.setUser(data.user);\n\n        this.client.instance().captureException(exception);\n    }\n\n    private captureRpcException(\n        scope: Scope,\n        rpc: RpcArgumentsHost,\n        exception: any,\n    ): void {\n        scope.setExtra('rpc_data', rpc.getData());\n\n        this.client.instance().captureException(exception);\n    }\n\n    private captureWsException(\n        scope: Scope,\n        ws: WsArgumentsHost,\n        exception: any,\n    ): void {\n        scope.setExtra('ws_client', ws.getClient());\n        scope.setExtra('ws_data', ws.getData());\n\n        this.client.instance().captureException(exception);\n    }\n\n    private captureGraphqlException(scope: Scope, gqlContext: GqlExecutionContextTpe, exception: any): void {\n        const info = gqlContext.getInfo()\n        const context = gqlContext.getContext()\n\n        scope.setExtra('type', info.parentType.name)\n\n        if (context.req) {\n            // req within graphql context needs modification in\n            const data = Handlers.parseRequest(<any>{}, context.req, {});\n\n            scope.setExtra('req', data.request);\n\n            if (data.extra) scope.setExtras(data.extra);\n            if (data.user) scope.setUser(data.user);\n        }\n\n        this.client.instance().captureException(exception);\n    }\n}\n"]}